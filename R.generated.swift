//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `NavigationBar`.
    static let navigationBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavigationBar")
    
    /// `UIColor(named: "NavigationBar", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navigationBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navigationBar, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `HistoryTableViewCell`.
    static let historyTableViewCell = _R.nib._HistoryTableViewCell()
    /// Nib `IntegerArrayCollectionViewCell`.
    static let integerArrayCollectionViewCell = _R.nib._IntegerArrayCollectionViewCell()
    
    /// `UINib(name: "HistoryTableViewCell", in: bundle)`
    static func historyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyTableViewCell)
    }
    
    /// `UINib(name: "IntegerArrayCollectionViewCell", in: bundle)`
    static func integerArrayCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.integerArrayCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `historyTableViewCell`.
    static let historyTableViewCell: Rswift.ReuseIdentifier<HistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "historyTableViewCell")
    /// Reuse identifier `integerArrayCollectionViewCell`.
    static let integerArrayCollectionViewCell: Rswift.ReuseIdentifier<IntegerArrayCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "integerArrayCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainScreenViewController`, and contains static references to 1 segues.
    struct mainScreenViewController {
      /// Segue identifier `navigateToHistory`.
      static let navigateToHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainScreenViewController, HistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "navigateToHistory")
      
      /// Optionally returns a typed version of segue `navigateToHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func navigateToHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainScreenViewController, HistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainScreenViewController.navigateToHistory, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// en translation: Found
      /// 
      /// Locales: en, pt
      static let found = Rswift.StringResource(key: "found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt"], comment: nil)
      /// en translation: Not Found
      /// 
      /// Locales: en, pt
      static let notFound = Rswift.StringResource(key: "not-found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt"], comment: nil)
      /// en translation: Please check your internet connection
      /// 
      /// Locales: en, pt
      static let connectionError = Rswift.StringResource(key: "connection-error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt"], comment: nil)
      /// en translation: There is no still no matches saved, what are you waiting for? :)
      /// 
      /// Locales: en, pt
      static let noMatches = Rswift.StringResource(key: "no-matches", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt"], comment: nil)
      
      /// en translation: Found
      /// 
      /// Locales: en, pt
      static func found(_: Void = ()) -> String {
        return NSLocalizedString("found", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not Found
      /// 
      /// Locales: en, pt
      static func notFound(_: Void = ()) -> String {
        return NSLocalizedString("not-found", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please check your internet connection
      /// 
      /// Locales: en, pt
      static func connectionError(_: Void = ()) -> String {
        return NSLocalizedString("connection-error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There is no still no matches saved, what are you waiting for? :)
      /// 
      /// Locales: en, pt
      static func noMatches(_: Void = ()) -> String {
        return NSLocalizedString("no-matches", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 4 localization keys.
    struct main {
      /// pt translation:  
      /// 
      /// Locales: pt, en
      static let nQC9PQQTitle = Rswift.StringResource(key: "7nQ-c9-pQQ.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt", "en"], comment: nil)
      /// pt translation: Histórico de Consulta
      /// 
      /// Locales: pt, en
      static let aNbGdLWTNormalTitle = Rswift.StringResource(key: "aNb-gd-lWT.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt", "en"], comment: nil)
      /// pt translation: Redefinir Lista
      /// 
      /// Locales: pt, en
      static let aowXv7C3NormalTitle = Rswift.StringResource(key: "aow-Xv-7C3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt", "en"], comment: nil)
      /// pt translation: Verificar
      /// 
      /// Locales: pt, en
      static let cnSjPhnNormalTitle = Rswift.StringResource(key: "9Cn-Sj-phn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt", "en"], comment: nil)
      
      /// pt translation:  
      /// 
      /// Locales: pt, en
      static func nQC9PQQTitle(_: Void = ()) -> String {
        return NSLocalizedString("7nQ-c9-pQQ.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt translation: Histórico de Consulta
      /// 
      /// Locales: pt, en
      static func aNbGdLWTNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("aNb-gd-lWT.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt translation: Redefinir Lista
      /// 
      /// Locales: pt, en
      static func aowXv7C3NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("aow-Xv-7C3.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt translation: Verificar
      /// 
      /// Locales: pt, en
      static func cnSjPhnNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("9Cn-Sj-phn.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _HistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HistoryTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "historyTableViewCell"
      let name = "HistoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IntegerArrayCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IntegerArrayCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "integerArrayCollectionViewCell"
      let name = "IntegerArrayCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IntegerArrayCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntegerArrayCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let historyViewController = StoryboardViewControllerResource<HistoryViewController>(identifier: "HistoryViewController")
      let mainScreenViewController = StoryboardViewControllerResource<MainScreenViewController>(identifier: "MainScreenViewController")
      let name = "Main"
      
      func historyViewController(_: Void = ()) -> HistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyViewController)
      }
      
      func mainScreenViewController(_: Void = ()) -> MainScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainScreenViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().historyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyViewController' could not be loaded from storyboard 'Main' as 'HistoryViewController'.") }
        if _R.storyboard.main().mainScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainScreenViewController' could not be loaded from storyboard 'Main' as 'MainScreenViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
